package com.dawidrichert.database.repositories;

import com.dawidrichert.database.models.DbPermission;
import com.dawidrichert.database.models.DbUser;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PermissionRepository extends BaseRepository<DbPermission> {

    private static final String tableName = "Users";
    private static final String col_Id = "Id";
    private static final String col_RoleId = "RoleId";
    private static final String col_Name = "Name";

    public PermissionRepository(DataSource dataSource) {
        super(dataSource, tableName, col_Id);
    }

    @Override
    public void add(DbPermission permission) {
        try(Connection connection = dataSource.getConnection()) {
            String sql;
            sql  = String.format("INSERT INTO %s (", tableName);
            sql += String.format("%s, ", col_RoleId);
            sql += String.format("%s) VALUES (?, ?)", col_Name);

            try(PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setLong(1, permission.getRoleId());
                preparedStatement.setString(2, permission.getName());
                preparedStatement.executeUpdate();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void update(DbPermission permission) {
        try(Connection connection = dataSource.getConnection()) {
            String sql;
            sql  = String.format ("UPDATE %s SET ", tableName);
            sql += String.format ("%s=?, ", col_RoleId);
            sql += String.format ("%s=? ", col_Name);
            sql += String.format ("WHERE %s=?", col_Id);

            try(PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setLong(1, permission.getRoleId());
                preparedStatement.setString(2, permission.getName());
                preparedStatement.setLong(3, permission.getId());
                preparedStatement.executeUpdate();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void createTableIfNotExists() throws SQLException {
        try(Connection connection = dataSource.getConnection()) {
            String sql;
            sql = String.format("CREATE TABLE IF NOT EXISTS %s (", tableName);
            sql += String.format("%s BIGINT GENERATED BY DEFAULT AS IDENTITY, ", col_Id);
            sql += String.format("%s BIGINT NOT NULL, ", col_RoleId);
            sql += String.format("%s VARCHAR(256) NOT NULL)", col_Name);

            try(PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.executeUpdate();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected DbPermission mapResultSetToModel(ResultSet resultSet) throws SQLException {
        return new DbPermission(
                resultSet.getLong(col_Id),
                resultSet.getLong(col_RoleId),
                resultSet.getString(col_Name));
    }
}
