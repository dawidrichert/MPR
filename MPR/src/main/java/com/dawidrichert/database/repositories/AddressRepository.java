package com.dawidrichert.database.repositories;

import com.dawidrichert.database.models.DbAddress;
import com.dawidrichert.database.models.DbUser;

import javax.sql.DataSource;
import java.sql.*;

public class AddressRepository extends BaseRepository<DbAddress> {

    private static final String tableName = "Addresses";
    private static final String col_Id = "Id";
    private static final String col_UserId = "UserId";
    private static final String col_Street = "Street";
    private static final String col_City = "City";
    private static final String col_PostalCode = "PostalCode";
    private static final String col_Province = "Province";
    private static final String col_Country = "Country";

    public AddressRepository(DataSource dataSource) {
        super(dataSource, tableName, col_Id);
    }

    @Override
    public long add(DbAddress address) {
        try(Connection connection = dataSource.getConnection()) {
            String sql;
            sql  = String.format("INSERT INTO %s (", tableName);
            sql += String.format("%s, ", col_UserId);
            sql += String.format("%s, ", col_Street);
            sql += String.format("%s, ", col_City);
            sql += String.format("%s, ", col_PostalCode);
            sql += String.format("%s, ", col_Province);
            sql += String.format("%s) VALUES (?, ?, ?, ?, ?, ?)", col_Country);

            try(PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                preparedStatement.setLong(1, address.getUserId());
                preparedStatement.setString(2, address.getStreet());
                preparedStatement.setString(3, address.getCity());
                preparedStatement.setString(4, address.getPostalCode());
                preparedStatement.setString(5, address.getProvince());
                preparedStatement.setString(6, address.getCountry());
                preparedStatement.executeUpdate();
                return getLastInsertedId(preparedStatement);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        return -1;
    }

    @Override
    public void update(DbAddress address) {
        try(Connection connection = dataSource.getConnection()) {
            String sql;
            sql  = String.format ("UPDATE %s SET ", tableName);
            sql += String.format ("%s=?, ", col_UserId);
            sql += String.format ("%s=?, ", col_Street);
            sql += String.format ("%s=?, ", col_City);
            sql += String.format ("%s=?, ", col_PostalCode);
            sql += String.format ("%s=?, ", col_Province);
            sql += String.format ("%s=? ", col_Country);
            sql += String.format ("WHERE %s=?", col_Id);

            try(PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.setLong(1, address.getUserId());
                preparedStatement.setString(2, address.getStreet());
                preparedStatement.setString(3, address.getCity());
                preparedStatement.setString(4, address.getPostalCode());
                preparedStatement.setString(5, address.getProvince());
                preparedStatement.setString(6, address.getCountry());
                preparedStatement.setLong(7, address.getId());
                preparedStatement.executeUpdate();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void createTableIfNotExists() throws SQLException {
        try(Connection connection = dataSource.getConnection()) {
            String sql;
            sql = String.format("CREATE TABLE IF NOT EXISTS %s (", tableName);
            sql += String.format("%s BIGINT GENERATED BY DEFAULT AS IDENTITY, ", col_Id);
            sql += String.format("%s BIGINT NOT NULL, ", col_UserId);
            sql += String.format("%s VARCHAR(256) NOT NULL, ", col_Street);
            sql += String.format("%s VARCHAR(256) NOT NULL, ", col_City);
            sql += String.format("%s VARCHAR(256) NOT NULL, ", col_PostalCode);
            sql += String.format("%s VARCHAR(256) NOT NULL, ", col_Province);
            sql += String.format("%s VARCHAR(256) NOT NULL)", col_Country);

            try(PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                preparedStatement.executeUpdate();
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected DbAddress mapResultSetToModel(ResultSet resultSet) throws SQLException {
        return new DbAddress(
                resultSet.getLong(col_Id),
                resultSet.getLong(col_UserId),
                resultSet.getString(col_Street),
                resultSet.getString(col_City),
                resultSet.getString(col_PostalCode),
                resultSet.getString(col_Province),
                resultSet.getString(col_Country));
    }
}
